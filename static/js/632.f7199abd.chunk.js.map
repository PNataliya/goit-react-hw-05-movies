{"version":3,"file":"static/js/632.f7199abd.chunk.js","mappings":"8QAGaA,EAAqBC,EAAAA,EAAAA,IAAU,0CAI/BC,GAAiBD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAY,sRAgB7BG,EAAiBH,EAAAA,EAAAA,GAAS,2KAW1BI,EAAQJ,EAAAA,EAAAA,KAAW,+CAInBK,EAAQL,EAAAA,EAAAA,GAAS,8C,SCpCjBM,EAAsBN,EAAAA,GAAAA,IAAU,sHAOhCO,EAASP,EAAAA,GAAAA,IAAU,8HAMnBQ,EAAYR,EAAAA,GAAAA,GAAS,gDAIrBS,EAAYT,EAAAA,GAAAA,EAAQ,gDAIpBU,EAAgBV,EAAAA,GAAAA,GAAS,gDAIzBW,EAAWX,EAAAA,GAAAA,EAAQ,gDAInBY,EAAcZ,EAAAA,GAAAA,GAAS,gD,SCnBvBa,EAAgB,SAAH,GAAoD,IAA9CC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAAOC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAY9D,OACE,UAACZ,EAAmB,YAClB,0BACE,SAACC,EAAM,CAACY,IAAKL,EAAQM,IAAKL,EAAOM,MAAM,MAAMC,OAAO,WAEtD,4BACE,SAACd,EAAS,UAAEO,KACZ,UAACN,EAAS,0BAAcO,EAAK,QAC7B,SAACN,EAAa,wBACd,SAACC,EAAQ,UAAEM,KACX,SAACL,EAAW,sBACZ,uBAAIM,SAIZ,ECwEA,EA7FqB,WAAO,IAAD,IACzB,GAA0BK,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA/BC,EAAK,KAAEC,EAAQ,KACdC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,EAA+B,QAAvB,EAAiB,QAAjB,GADGC,EAAAA,EAAAA,MACSC,aAAK,aAAd,EAAgBC,YAAI,QAAI,UAyBzC,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,UAVJ,gCAUiB,iBAASP,EAAE,oBAT5B,mCAS+C,mBAGzDQ,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAG,GACJb,EAAS,CACPX,OAAO,mCAAD,OAAqCwB,EAAKC,aAChDxB,MAAOuB,EAAKvB,MACZC,MAAOwB,OAAOC,SAA6B,GAApBH,EAAKI,cAC5BzB,SAAUqB,EAAKrB,SACfC,OAAQoB,EAAKpB,OACVyB,QAAO,SAACC,EAAKC,GAAK,OAAMD,GAAOC,EAAMC,KAAO,IAAG,GAAG,IAClDC,QAEP,IACCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAM,GAIxC,GAAG,CAACvB,KAGF,2BACE,UAAC3B,EAAkB,YACjB,UAACE,EAAc,CAACmD,GAAIxB,EAAS,WAC3B,SAACxB,EAAK,WACJ,SAAC,MAAgB,CAACiD,KAAM,OAClB,cAIV,SAACxC,EAAa,CACZC,OAAQU,EAAMV,OACdC,MAAOS,EAAMT,MACbC,MAAOQ,EAAMR,MACbC,SAAUO,EAAMP,SAChBC,OAAQM,EAAMN,UAGhB,SAACb,EAAK,sCACN,UAACF,EAAc,YACb,yBACE,SAAC,KAAI,CAACiD,GAAG,OAAOtB,MAAO,CAAEC,KAAMH,GAAW,qBAI5C,yBACE,SAAC,KAAI,CAACwB,GAAG,UAAUtB,MAAO,CAAEC,KAAMH,GAAW,2BAMjD,SAAC,EAAA0B,SAAQ,CAACC,UAAU,6CAA2B,UAC7C,SAAC,KAAM,UAKjB,C","sources":["components/MovieDetailes/MovieDetalies.styled.jsx","components/MovieMainInfo/MovieMainInfo.styled.jsx","components/MovieMainInfo/MovieMainInfo.jsx","components/MovieDetailes/MovieDetalies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieDetailsStyled = styled.div`\n  padding: 40px;\n`;\n\nexport const BackLinkStyled = styled(Link)`\n  display: inline-block;\n  padding: 3px 10px;\n  margin-bottom: 10px;\n  border: 1px solid #a8a8ee;\n  border-radius: 10px;\n  color: #000000;\n  text-decoration: none;\n\n  :hover,\n  :focus {\n    color: #ffffff;\n    background-color: #a8a8ee;\n  }\n`;\n\nexport const AdditionalInfo = styled.ul`\n  margin-bottom: 16px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid #ccc8c8;\n\n  a {\n    display: block;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Arrow = styled.span`\n  margin-right: 16px;\n`;\n\nexport const Titel = styled.h2`\n  margin: 12px 16px;\n`;\n","import styled from 'styled-components';\n\nexport const MovieMainInfoStyled = styled.div`\n  display: flex;\n  gap: 16px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid #ccc8c8;\n`;\n\nexport const Poster = styled.img`\n  border: 2px solid #fff;\n  border-radius: 14px;\n  box-shadow: 0px 4px 5px 0px rgba(0, 0, 0, 0.5);\n`;\n\nexport const TitleMain = styled.h1`\n  margin-bottom: 15px;\n`;\n\nexport const UserScore = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const TitleOverview = styled.h2`\n  margin-bottom: 15px;\n`;\n\nexport const Overview = styled.p`\n  margin-bottom: 15px;\n`;\n\nexport const TitleGenres = styled.h3`\n  margin-bottom: 15px;\n`;\n","import PropTypes from 'prop-types';\n// import defaultPoster from '../../images/noposter.jpg';\nimport {\n  MovieMainInfoStyled,\n  Poster,\n  TitleMain,\n  UserScore,\n  TitleOverview,\n  Overview,\n  TitleGenres,\n} from './MovieMainInfo.styled';\n\nexport const MovieMainInfo = ({ poster, title, score, overview, genres }) => {\n  //   console.log(poster);\n  //   console.log(title);\n\n  // function fetchFilmPhoto(poster) {\n  //   const noPosterAvaliable = defaultPoster;\n\n  //   return poster\n  //     ? `https://image.tmdb.org/t/p/w500${poster}`\n  //     : noPosterAvaliable;\n  // }\n\n  return (\n    <MovieMainInfoStyled>\n      <div>\n        <Poster src={poster} alt={title} width=\"240\" height=\"320\" />\n      </div>\n      <div>\n        <TitleMain>{title}</TitleMain>\n        <UserScore>User Score: {score}%</UserScore>\n        <TitleOverview>Overview</TitleOverview>\n        <Overview>{overview}</Overview>\n        <TitleGenres>Genres</TitleGenres>\n        <p>{genres}</p>\n      </div>\n    </MovieMainInfoStyled>\n  );\n};\n\nMovieMainInfo.propTypes = {\n  poster: PropTypes.string,\n  title: PropTypes.string,\n  score: PropTypes.number,\n  overview: PropTypes.string,\n  genres: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { Outlet, useLocation, useParams, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Suspense } from 'react';\nimport { HiArrowUturnLeft } from 'react-icons/hi2';\nimport {\n  MovieDetailsStyled,\n  BackLinkStyled,\n  AdditionalInfo,\n  Arrow,\n  Titel,\n} from './MovieDetalies.styled';\n\nimport { MovieMainInfo } from 'components/MovieMainInfo/MovieMainInfo';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '62a0747aac137915f35199437084137e';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const { id } = useParams();\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const urlDetails = `${API_URL}movie/${id}?api_key=${API_KEY}&language=en-US`;\n\n    function fetchMovie() {\n      fetch(urlDetails)\n        .then(response => response.json())\n        .then(data => {\n          setMovie({\n            poster: `https://image.tmdb.org/t/p/w500/${data.poster_path}`,\n            title: data.title,\n            score: Number.parseInt(data.vote_average * 10),\n            overview: data.overview,\n            genres: data.genres\n              .reduce((acc, genre) => (acc += genre.name + ' '), '')\n              .trim(),\n          });\n        })\n        .catch(error => console.log(error));\n    }\n\n    fetchMovie();\n  }, [id]);\n\n  return (\n    <main>\n      <MovieDetailsStyled>\n        <BackLinkStyled to={backLink}>\n          <Arrow>\n            <HiArrowUturnLeft size={12} />\n          </Arrow>\n          Go back\n        </BackLinkStyled>\n\n        <MovieMainInfo\n          poster={movie.poster}\n          title={movie.title}\n          score={movie.score}\n          overview={movie.overview}\n          genres={movie.genres}\n        />\n\n        <Titel>Additional information</Titel>\n        <AdditionalInfo>\n          <li>\n            <Link to=\"cast\" state={{ from: backLink }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: backLink }}>\n              Reviews\n            </Link>\n          </li>\n        </AdditionalInfo>\n\n        <Suspense fallback={<div>Loading page...</div>}>\n          <Outlet />\n        </Suspense>\n      </MovieDetailsStyled>\n    </main>\n  );\n};\n\nMovieDetails.propTypes = {\n  details: PropTypes.arrayOf(\n    PropTypes.exact({\n      poster_path: PropTypes.string,\n      original_title: PropTypes.string.isRequired,\n      popularity: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(\n        PropTypes.exact({\n          name: PropTypes.string.isRequired,\n        })\n      ),\n    })\n  ),\n  backLinkHref: PropTypes.string,\n  additionalInfo: PropTypes.arrayOf(\n    PropTypes.exact({\n      href: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    })\n  ),\n  path: PropTypes.string,\n};\n\nexport default MovieDetails;\n"],"names":["MovieDetailsStyled","styled","BackLinkStyled","Link","AdditionalInfo","Arrow","Titel","MovieMainInfoStyled","Poster","TitleMain","UserScore","TitleOverview","Overview","TitleGenres","MovieMainInfo","poster","title","score","overview","genres","src","alt","width","height","useState","movie","setMovie","id","useParams","backLink","useLocation","state","from","useEffect","urlDetails","fetch","then","response","json","data","poster_path","Number","parseInt","vote_average","reduce","acc","genre","name","trim","catch","error","console","log","to","size","Suspense","fallback"],"sourceRoot":""}